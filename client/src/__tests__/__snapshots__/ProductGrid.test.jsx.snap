exports[`class ProductGrid extends /* istanbul ignore next */_react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      products: [],
      nextProducts: [],
      isProductGridVisible: false,
      allProductsLoaded: false,
      sortBy: null,
      descending: false,
      page: 0,
      numProductsVisible: 0 };


    this.defaultProps = {
      numProductsPerPage: 25,
      componentName: 'ProductGrid' };

  }

  componentDidMount() {
    // Initially load first batch of products.
    const query =
    'limit=' + this.defaultProps.numProductsPerPage +
    '&skip=' + this.state.page * this.defaultProps.numProductsPerPage;


    this.loadProducts(query, products => {
      const numProductsVisible = products.length;
      const initialProducts = products;
      const nextPage = this.state.page + 1;

      this.setState({
        products: initialProducts,
        numProductsVisible: numProductsVisible,
        isProductGridVisible: true,
        page: nextPage },

      () => {
        // Pre-fetch next batch of products and cache them.
        const nextQuery =
        'limit=' + this.defaultProps.numProductsPerPage +
        '&skip=' + this.state.page * this.defaultProps.numProductsPerPage;

        this.loadProducts(nextQuery, nextProducts => {
          this.setState({ nextProducts: nextProducts });
        });
        // Show ProductGrid now that it has loaded.
        this.props.hasProductGridLoaded();
      });

    });
  }

  hasMoreProducts() {
    return this.state.allProductsLoaded ? false : true;
  }

  loadProducts(query, callback) {
    // Creates an array of products in JSON format.
    /* istanbul ignore next */_Client2.default.loadProducts(query, products => {
      for (var i = 0; i < products.length; i++) {
        if (products[i] === null || products[i] === undefined || products[i] === '') {
          // Remove trailing newlines or empty nodes.
          products.splice(i, 1);
        } else {
          products[i] = JSON.parse(products[i]);
        }
      }

      callback(products);
    });
  }

  loadNextProducts() {
    // Render the page with the previously cached nextProducts and update state.
    const newProducts = this.state.products.concat(this.state.nextProducts);
    const numProductsVisible = newProducts.length;
    const nextPage = this.state.page + 1;
    const query =
    'limit=' + this.defaultProps.numProductsPerPage +
    '&skip=' + numProductsVisible;


    // Update products with cached next page.
    this.setState({
      products: newProducts,
      numProductsVisible: numProductsVisible,
      page: nextPage },

    this.loadProducts(query, nextProducts => {
      if (nextProducts.length < this.defaultProps.numProductsPerPage) {
        this.setState({
          allProductsLoaded: true,
          nextProducts: nextProducts });

      } else {
        // Pre-fetch next products and cache.
        this.setState({ nextProducts: nextProducts });
      }
    }));

  }

  _sort(event) {
    // Make column lowercase and then
    // remove the sort arrows before checking column name.
    var column = event.target.innerHTML.toLowerCase().split(" ")[0];
    // Don't allow sorting on the "Add To Cart" column.
    if (column !== "add") {
      var products = this.state.products.slice();
      var descending = this.state.sortBy === column && !this.state.descending;

      products.sort((a, b) => {
        switch (column) {
          case 'id':
            // Sorts by index which prefixes the id string.
            // Separate index from id, then convert index to int before sorting.
            let idA = parseInt(a[column].split('-')[0], 10);
            let idB = parseInt(b[column].split('-')[0], 10);
            return descending ?
            idB - idA :
            idA - idB;
          case 'price':
            return descending ?
            b[column] - a[column] :
            a[column] - b[column];
          case 'product':
            return descending ?
            b['size'] - a['size'] :
            a['size'] - b['size'];
          case 'size':
            return descending ?
            b[column] - a[column] :
            a[column] - b[column];
          case 'date':
            return descending ?
            new Date(b[column]) - new Date(a[column]) :
            new Date(a[column]) - new Date(b[column]);
          default:
            throw new Error('Column is not valid');}

      });

      this.setState({
        products: products,
        sortBy: column,
        descending: descending });

    }
  }

  render() {/* istanbul ignore next */var _state =






    this.state; /* istanbul ignore next */const products = _state.products,isProductGridVisible = _state.isProductGridVisible,sortBy = _state.sortBy,descending = _state.descending,allProductsLoaded = _state.allProductsLoaded;

    const productRows = products.map(function (product, idx) {
      // Show an Advertisement every 20 Products.
      if (idx % 20 === 0 && idx !== 0) {
        // If there is an Advertisement, render both Advertisement and Product.
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */{ key: idx, __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Advertisement2.default, /* istanbul ignore next */{ key: idx,
              generateRandomId: this.props.generateRandomId,
              componentName: this.defaultProps.componentName, __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Product2.default, /* istanbul ignore next */{ key: product.id,
              product: product,
              formatPriceFromCentsToDollars: this.props.formatPriceFromCentsToDollars,
              toggleProductInCart: this.props.toggleProductInCart, __source: { fileName: _jsxFileName, lineNumber: 178 }, __self: this })));

      } else {
        // If there is no Advertisement, just render Product.
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */{ key: idx, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Product2.default, /* istanbul ignore next */{ key: product.id,
              product: product,
              formatPriceFromCentsToDollars: this.props.formatPriceFromCentsToDollars,
              toggleProductInCart: this.props.toggleProductInCart, __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this })));

      }
    }.bind(this));

    const headers = ["Product", "Date", "Id", "Price", "Size", "Add To Cart"];

    const productHeaders = headers.map((title, idx) =>
    sortBy === title.toLowerCase() ?
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'th', /* istanbul ignore next */{ key: idx, onClick: this._sort.bind(this), __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this }, title += descending ? ' \u2191' : ' \u2193') :
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'th', /* istanbul ignore next */{ key: idx, onClick: this._sort.bind(this), __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }, title));



    let grid = null;

    if (isProductGridVisible) {
      grid =
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ id: 'product-grid-wrapper', __source: { fileName: _jsxFileName, lineNumber: 207 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactInfiniteScroller2.default, /* istanbul ignore next */{ className: 'product-grid',
            pageStart: 0,
            loadMore: this.loadNextProducts.bind(this),
            hasMore: !allProductsLoaded, __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'table', /* istanbul ignore next */{ className: 'product-grid-table', __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'thead', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */{ className: 'product-attribute-header', __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this },
                productHeaders)),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tfoot', /* istanbul ignore next */{ className: allProductsLoaded ? "product-grid-footer" : "hidden-product-grid-footer", __source: { fileName: _jsxFileName, lineNumber: 218 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */{ className: 'table-footer', __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'td', /* istanbul ignore next */{ colSpan: '6', __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this },
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: this },
                    "~ end of catalogue ~")))),




            productRows)));




    } else {
      grid = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ id: 'product-grid', __source: { fileName: _jsxFileName, lineNumber: 233 }, __self: this });
    }

    return grid;
  }} renders and matches our snapshot 1`] = `
<div
  id="product-grid" />
`;

exports[`class ProductGrid extends /* istanbul ignore next */_react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      products: [],
      nextProducts: [],
      isProductGridVisible: false,
      allProductsLoaded: false,
      sortBy: null,
      descending: false,
      page: 0,
      numProductsVisible: 0 };


    this.defaultProps = {
      numProductsPerPage: 25,
      componentName: 'ProductGrid' };

  }

  componentDidMount() {
    // Initially load first batch of products.
    const query =
    'limit=' + this.defaultProps.numProductsPerPage +
    '&skip=' + this.state.page * this.defaultProps.numProductsPerPage;


    this.loadProducts(query, products => {
      const numProductsVisible = products.length;
      const initialProducts = products;
      const nextPage = this.state.page + 1;

      this.setState({
        products: initialProducts,
        numProductsVisible: numProductsVisible,
        isProductGridVisible: true,
        page: nextPage },

      () => {
        // Pre-fetch next batch of products and cache them.
        const nextQuery =
        'limit=' + this.defaultProps.numProductsPerPage +
        '&skip=' + this.state.page * this.defaultProps.numProductsPerPage;

        this.loadProducts(nextQuery, nextProducts => {
          this.setState({ nextProducts: nextProducts });
        });
        // Show ProductGrid now that it has loaded.
        this.props.hasProductGridLoaded();
      });

    });
  }

  hasMoreProducts() {
    return this.state.allProductsLoaded ? false : true;
  }

  loadProducts(query, callback) {
    // Creates an array of products in JSON format.
    /* istanbul ignore next */_Client2.default.loadProducts(query, products => {
      for (var i = 0; i < products.length; i++) {
        if (products[i] === null || products[i] === undefined || products[i] === '') {
          // Remove trailing newlines or empty nodes.
          products.splice(i, 1);
        } else {
          products[i] = JSON.parse(products[i]);
        }
      }

      callback(products);
    });
  }

  loadNextProducts() {
    // Render the page with the previously cached nextProducts and update state.
    const newProducts = this.state.products.concat(this.state.nextProducts);
    const numProductsVisible = newProducts.length;
    const nextPage = this.state.page + 1;
    const query =
    'limit=' + this.defaultProps.numProductsPerPage +
    '&skip=' + numProductsVisible;


    // Update products with cached next page.
    this.setState({
      products: newProducts,
      numProductsVisible: numProductsVisible,
      page: nextPage },

    this.loadProducts(query, nextProducts => {
      if (nextProducts.length < this.defaultProps.numProductsPerPage) {
        this.setState({
          allProductsLoaded: true,
          nextProducts: nextProducts });

      } else {
        // Pre-fetch next products and cache.
        this.setState({ nextProducts: nextProducts });
      }
    }));

  }

  _sort(event) {
    // Make column lowercase and then
    // remove the sort arrows before checking column name.
    var column = event.target.innerHTML.toLowerCase().split(" ")[0];
    // Don't allow sorting on the "Add To Cart" column.
    if (column !== "add") {
      var products = this.state.products.slice();
      var descending = this.state.sortBy === column && !this.state.descending;

      products.sort((a, b) => {
        switch (column) {
          case 'id':
            // Sorts by index which prefixes the id string.
            // Separate index from id, then convert index to int before sorting.
            let idA = parseInt(a[column].split('-')[0], 10);
            let idB = parseInt(b[column].split('-')[0], 10);
            return descending ?
            idB - idA :
            idA - idB;
          case 'price':
            return descending ?
            b[column] - a[column] :
            a[column] - b[column];
          case 'product':
            return descending ?
            b['size'] - a['size'] :
            a['size'] - b['size'];
          case 'size':
            return descending ?
            b[column] - a[column] :
            a[column] - b[column];
          case 'date':
            return descending ?
            new Date(b[column]) - new Date(a[column]) :
            new Date(a[column]) - new Date(b[column]);
          default:
            throw new Error('Column is not valid');}

      });

      this.setState({
        products: products,
        sortBy: column,
        descending: descending });

    }
  }

  render() {/* istanbul ignore next */var _state =






    this.state; /* istanbul ignore next */const products = _state.products,isProductGridVisible = _state.isProductGridVisible,sortBy = _state.sortBy,descending = _state.descending,allProductsLoaded = _state.allProductsLoaded;

    const productRows = products.map(function (product, idx) {
      // Show an Advertisement every 20 Products.
      if (idx % 20 === 0 && idx !== 0) {
        // If there is an Advertisement, render both Advertisement and Product.
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */{ key: idx, __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Advertisement2.default, /* istanbul ignore next */{ key: idx,
              generateRandomId: this.props.generateRandomId,
              componentName: this.defaultProps.componentName, __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Product2.default, /* istanbul ignore next */{ key: product.id,
              product: product,
              formatPriceFromCentsToDollars: this.props.formatPriceFromCentsToDollars,
              toggleProductInCart: this.props.toggleProductInCart, __source: { fileName: _jsxFileName, lineNumber: 178 }, __self: this })));

      } else {
        // If there is no Advertisement, just render Product.
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */{ key: idx, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Product2.default, /* istanbul ignore next */{ key: product.id,
              product: product,
              formatPriceFromCentsToDollars: this.props.formatPriceFromCentsToDollars,
              toggleProductInCart: this.props.toggleProductInCart, __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this })));

      }
    }.bind(this));

    const headers = ["Product", "Date", "Id", "Price", "Size", "Add To Cart"];

    const productHeaders = headers.map((title, idx) =>
    sortBy === title.toLowerCase() ?
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'th', /* istanbul ignore next */{ key: idx, onClick: this._sort.bind(this), __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this }, title += descending ? ' ↑' : ' ↓') :
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'th', /* istanbul ignore next */{ key: idx, onClick: this._sort.bind(this), __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }, title));



    let grid = null;

    if (isProductGridVisible) {
      grid =
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ id: 'product-grid-wrapper', __source: { fileName: _jsxFileName, lineNumber: 207 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactInfiniteScroller2.default, /* istanbul ignore next */{ className: 'product-grid',
            pageStart: 0,
            loadMore: this.loadNextProducts.bind(this),
            hasMore: !allProductsLoaded, __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'table', /* istanbul ignore next */{ className: 'product-grid-table', __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'thead', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */{ className: 'product-attribute-header', __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this },
                productHeaders)),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tfoot', /* istanbul ignore next */{ className: allProductsLoaded ? "product-grid-footer" : "hidden-product-grid-footer", __source: { fileName: _jsxFileName, lineNumber: 218 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */{ className: 'table-footer', __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'td', /* istanbul ignore next */{ colSpan: '6', __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this },
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: this },
                    "~ end of catalogue ~")))),




            productRows)));




    } else {
      grid = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ id: 'product-grid', __source: { fileName: _jsxFileName, lineNumber: 233 }, __self: this });
    }

    return grid;
  }} renders and matches our snapshot 1`] = `
<div
  id="product-grid" />
`;
